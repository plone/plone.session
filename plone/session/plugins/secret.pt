<h1 xmlns="http://www.w3.org/1999/xhtml"
    xmlns:i18n="http://xml.zope.org/namespaces/i18n"
    xmlns:tal="http://xml.zope.org/namespaces/tal"
    xml:lang="en"
    tal:replace="structure here/manage_page_header"
    i18n:domain="plone"
>
  PAGE HEADER
</h1>
<h2 tal:replace="structure here/manage_tabs">
  PAGE HEADER
</h2>

<h3 i18n:translate="">
  Session identifier management</h3>

<div class="form-help">
  <p i18n:translate="">
     You may use either a shared secret or the plone.keyring ring of five secrets
        (shared with the plone.protect CSRF protection framework.)
  </p>
  <p i18n:translate="">The following properties may be set through the Properties tab:
  </p>
  <dl>
    <dt i18n:translate="">Cookie validity timeout (in seconds)</dt>
    <dd i18n:translate="">After this, the session is invalid and the user must login again. Set to 0
          for the cookie to remain valid indefinitely. Note that when the user
          folder has caching enabled, cookie validity may not be checked on every
      request.</dd>

    <dt i18n:translate="">Use mod_auth_tkt compatible hashing algorithm</dt>
    <dd i18n:translate="">Compatibility with other implementations, but at the cost of using a weaker
      hashing algorithm.</dd>

    <dt i18n:translate="">Cookie name</dt>
    <dd i18n:translate="">Which cookie to use. This must also be set on the
      `credentials_cookie_auth`` plugin.</dd>

    <dt i18n:translate="">Cookie lifetime (in days)</dt>
    <dd i18n:translate="">This makes the cookie persistent across opening and closing the browser.</dd>

    <dt i18n:translate="">Cookie domain</dt>
    <dd i18n:translate="">A cookie may be shared across www1.example.com and www2.example.com by
      setting the cookie domain to ``.example.com``. (blank for the user's current domain)</dd>

    <dt i18n:translate="">Cookie path</dt>
    <dd i18n:translate="">What path the cookie is set valid (defaults to ``/``.)</dd>
  </dl>

</div>

<h3 i18n:translate="">Shared secret
  <span tal:condition="context/haveSharedSecret">(enabled)</span></h3>

<p i18n:translate="">
To enable logins between sites or other mod_auth_tkt systems, set the shared secret.
</p>
<form action="."
      method="post"
      tal:attributes="
        action string:${context/absolute_url};
      "
>

  <label for="shared_secret"
         i18n:translate=""
  >Shared secret:</label>
  <input autocomplete="off"
         name="shared_secret"
         size="50"
         type="text"
         value=""
  />
  <input name="manage_setSharedSecret:method"
         type="submit"
         value="Set shared secret"
         i18n:attributes="value"
  /><br />
  <input tal:replace="structure context/@@authenticator/authenticator" />
</form>


<form action="."
      method="post"
      tal:condition="context/haveSharedSecret"
      tal:attributes="
        action string:${context/absolute_url};
      "
>
  <p i18n:translate="">
    To use the plone.keyring secrets, remove the shared secret.
  </p>
  <input name="manage_removeSharedSecret:method"
         type="submit"
         value="Remove shared secret"
         i18n:attributes="value"
  />
  <input tal:replace="structure context/@@authenticator/authenticator" />
</form>

<h3 i18n:translate="">plone.keyring secrets
  <span tal:condition="not:context/haveSharedSecret">(enabled)</span></h3>

<p i18n:translate="">
This implementation uses a ring of five secrets: one of them is used to
generate new session identifiers, the others are older signing secrets which
are still considered to be valid.
</p>

<h4 i18n:translate="">Invalidate all session identifiers</h4>
<p i18n:translate="">
By clicking the button below you clear all secrets used to validate sessions.
This will immediately log out all users who use session authentication and
require them to log in again.
</p>
<p tal:condition="context/per_user_keyring"
   i18n:translate=""
>
In addition to the system keyring each user keyring will also be invalidated (since per-user keyrings are enabled).
</p>
<form action="."
      method="post"
      tal:attributes="
        action string:${context/absolute_url};
      "
>
  <input name="manage_clearSecrets:method"
         type="submit"
         value="Clear secrets"
         i18n:attributes="value"
  />
  <input tal:replace="structure context/@@authenticator/authenticator" />
</form>

<h4 i18n:translate="">Create a new (signing) secret</h4>
<p i18n:translate="">
By clicking the button below a new signing secret will be created and added
to the ring. This will remove the oldest secret from the ring if there already
were five secrets present.
</p>
<form action="."
      method="post"
      tal:attributes="
        action string:${context/absolute_url};
      "
>
  <input name="manage_createNewSecret:method"
         type="submit"
         value="New secret"
         i18n:attributes="value"
  />
  <input tal:replace="structure context/@@authenticator/authenticator" />
</form>

<h4 i18n:translate="">Use per-user keyrings (server-side logout)<span tal:condition="context/per_user_keyring">(enabled)</span></h4>
<p i18n:translate="">
By clicking the button below a separate keyring will be created for each user when
they login. The keyring will be cleared and regenerated when the user logs out,
thus invalidating their session cookie, making it impossible to re-use a previous cookie.
Per-user keyrings use a single secret.
</p>
<p i18n:translate="">
Users that have an active, valid session will still be able to use it (system keyring) until it expires.
They will then switch to their own keyring when they log in again.
</p>
<form action="."
      method="post"
      tal:attributes="
        action string:${context/absolute_url};
      "
>
  <input name="manage_togglePerUserKeyring:method"
         type="submit"
         tal:attributes="
           value python:test(context.per_user_keyring, 'Disable per-user keyrings', 'Enable per-user keyrings');
         "
  />
  <input tal:replace="structure context/@@authenticator/authenticator" />
</form>


<h1 tal:replace="structure here/manage_page_footer">
  PAGE FOOTER
</h1>
